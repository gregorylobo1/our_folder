#!/usr/bin/env python
#import libraries for rospy and math
import rospy
import math
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from mpl_toolkits.mplot3d import Axes3D

from struct import unpack

import random
import ctypes
import struct

from sensor_msgs.msg import PointCloud2, PointField, Image
import sensor_msgs.point_cloud2 as pc2
from std_msgs.msg import Header

global flag
global person

flag=0
person={}

def loaddep(data):

    global flag
    #print('Depth step is ' + str(data.step))
    #new = list(data.data)
    #print('Depth encoding is ' + str(data.encoding))
    #print(len(data.data))
    w=data.width
    h=data.height
    #im=np.zeros([h,w])
    im=[]
    raw=data.data
    #count=0
    c=0
    r=0

    for i in range(h*w):
        #count=count+1
        if i%100==0:
            p1=raw[i*4]
            p2=raw[i*4+1]
            p3=raw[i*4+2]
            p4=raw[i*4+3]

            point=[p1,p2,p3,p4]

            # aa=str(bytearray(list1))  # edit: this conversion wasn't needed
            aa= bytearray(point)
            bb=struct.unpack('<f', aa)[0]
            if math.isnan(bb):
                bb=10

            im.append([r,c,bb])

        c=c+1
        if(c==640):
            c=0
            r=r+1

    if flag==0:
        im=np.array(im)
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(im[:,0],im[:,1],im[:,2])
        plt.show()
        flag=2

    #print(count)




def loadim(data):

    #print('rgb step is ' + str(data.step))
    #print('rgb encoding is ' + str(data.encoding))
    #print('rgb height is ' + str(data.height))
    #print('rgb width is ' + str(data.width))
    #print('data length is ' + str(len(data.data)))
    #data=1

    #print('second digit: ')
    #print(ord(data.data[3]))
    #print(ord(data.data[4]))
    #print(ord(data.data[5]))
    #print('third digit: ')
    #print(ord(data.data[6]))
    #print(ord(data.data[7]))
    #print(ord(data.data[8]))

    count=0
    im= np.empty([data.height,data.width,3])
    global flag

    for r in range(data.height):
        for c in range(data.width):
            for i in range(3):
                im[r,c,i]=ord(data.data[c*3+r*3*640+(2-i)])
    #print('done')
    if flag==1:
        flag=2
        print(im.shape)
        print('first digit: ')
        print(ord(data.data[0+639*3]))
        print(ord(data.data[1+639*3]))
        print(ord(data.data[2+639*3]))
        print('second digit: ')
        print(im[479,300,0])
        print(im[479,300,1])
        print(im[470,300,2])
        plt.imshow(im)
        plt.show()


def load():

    rospy.init_node('testpc', anonymous=True)

    #pose_subs=rospy.Subscriber('/camera/depth_registered/points', PointCloud2, update, queue_size=1)
    camera_sub=rospy.Subscriber('/camera/rgb/image_color/', Image, loadim, queue_size=1)
    camera_sub=rospy.Subscriber('/camera/depth/image/', Image, loaddep, queue_size=1)




    while not rospy.is_shutdown():
		#print(pose_subs)
        rospy.spin()

if __name__ == '__main__':
	try:
		#Testing our function
		load()
	except rospy.ROSInterruptException: pass
